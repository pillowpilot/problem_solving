#include <cstdio>
#include <vector>
#include <list>
#include <queue>

using namespace std;

typedef struct{
  int v;
  int w;
} edata;
typedef struct{
  list<edata> adj;
} vdata;
typedef vector<vdata> vv;
typedef vector<int> vi;

vv g;
vi parent;

void initGraph(int m){
  g.clear();
  g.resize(m);
  parent.clear();
  for(int i = 0; i < m; i++){
    parent.push_back(i);
  }
  edges.clear();
}

void addEdge(int u, int v, int w){
  g[u].adj.push_back({v, w});
  g[v].adj.push_back({u, w});
}

void print(){
  for(int i = 0; i < g.size(); i++){
    printf("[%d]: ", i);
    list<edata>::const_iterator iter = g[i].adj.begin();
    while( iter != g[i].adj.end() ){
      printf("%d %d, ", iter->v, iter->w);
      iter++;
    }
    printf("\n");
  }
}



void kruskal(){
  
}

int main(){
  int m, n, u, v, w;
  scanf("%d %d", &m, &n);
  while( !(m == 0 && n == 0) ){
    initGraph(m);
    while( n-- > 0 ){
      scanf("%d %d %d", &u, &v, &w);
      addEdge(u, v, w);
    }
    print();
    
    scanf("%d %d", &m, &n);
  }
}
