#include <iostream>
#include <vector>
#include <map>

using namespace std;

typedef map<string, int> msi;
typedef vector<string> vs;
typedef vector<int> vi;

vs substrs;
vi repets;
msi mapper;

void loadMapper(const string& s){
  mapper = msi();
  substrs = vs();
  repets = vi();
  
  for( int i = 0; i < s.size(); i++ ){
    for( int j = i + 1; j <= s.size(); j++ ){
      string ss = s.substr(i, j - i);
      auto iter = mapper.find(ss);
      if( iter  == mapper.end() ){
	substrs.push_back( ss );
	repets.push_back( 1 );
	mapper[ss] = substrs.size() - 1;
      }else{
	repets[iter->second]++;
      }
    }
  }


  /*cout << "<" << s << ">" << endl;
  for( int i = 0; i < substrs.size(); i++ ){
    cout << "-- " << substrs[i] << " " << repets[i] << endl;
    }*/
}

int main(){
  ios_base::sync_with_stdio(false);
  int n;

  cin >> n;
  while( n-- > 0 ){
    string s;
    cin >> s;

    loadMapper(s);

    vi filtered = vi();
    for( int i = 0; i < substrs.size(); i++ ){
      if( repets[i] > 1 ){
	filtered.push_back(i);
      }
    }

    /*for( int i = 0; i < filtered.size(); i++ ){
      cout << ">> " << substrs[ filtered[i] ] << " " << repets[ filtered[i] ] <<  endl;
    }*/
    
    if( filtered.size() == 0 ){
      cout << "No repetitions found!" << endl;
    }else{
      int r = 0;
      for( int i = 1; i < filtered.size(); i++ ){
	if( substrs[filtered[i]].size() > substrs[filtered[r]].size() ||
	    (substrs[filtered[i]].size() == substrs[filtered[r]].size() && substrs[filtered[i]] < substrs[filtered[r]])){
	  r = i;
	}
      }
      cout << substrs[ filtered[r] ] << " " << repets[ filtered[r] ] << endl;
    }
    
  }
  return 0;
}
