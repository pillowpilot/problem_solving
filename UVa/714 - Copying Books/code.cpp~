#include <cstdio>
#include <vector>

using namespace std;

typedef vector<int> vi;

vi pages;
vi tasks;

int solve(int k){
  bool overflow;
  int ans, error, low = 1, high = 0;

  vi::const_iterator iter = pages.begin();
  while( iter != pages.end() ){
    high += *iter;
    iter++;
  }

  // 33 iterations will be enough
  while( high - low > 1 ){
    overflow = false;
    ans = low + (high - low) / 2;
    tasks = vi(k); // Restore tasks to 0

    //printf("[%d, %d] (%d) \n", low, high, ans);

    iter = pages.begin();
    for(int i = 0; i < k - 1; i++){
      while( iter != pages.end() && tasks[i] + *iter <= ans ){
	tasks[i] += *iter;
	iter++;
      }
    }
    while( iter != pages.end() ){
      tasks[ tasks.size() - 1] += *iter;
      iter++;
    }
    
    iter = tasks.begin();
    error = 0;
    while( iter != tasks.end() ){
      if( ans - *iter < 0 ) overflow = true;
      error += ans - *iter;
      iter++;
    }

    if( overflow == true ){
      low = ans;
    }else{
      high = ans;
    }
  }
  return ans;
}

void print( int ans ){
  int sum;
  vi::const_iterator page = pages.begin();
  for(size_t i = 0; i < tasks.size() - 1; i++){
    sum = 0;
    while( sum + *page <= tasks[i] ){
      printf("%d ", *page);
      sum += *page;
      page++;
    }
    printf("/ ");
  }
  while( page != prev(pages.end()) ){
    printf("%d ", *page);
    page++;
  }
  printf("%d", *page);
}

void init(){
  pages.clear();
}

int main(){
  int cases, k, m, ans;

  pages.reserve( 550 );
  scanf("%d", &cases);
  while( cases-- > 0 ){
    scanf("%d%d", &m, &k);
    init();
    while( m-- > 0 ){
      int p;
      scanf("%d", &p);
      pages.push_back(p);
    }

    ans = solve(k);
    //    printf("%d\n", ans);
    print(ans);
    if( cases != 0 ) printf("\n");
  }
  return 0;
}
