#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <cassert>

#define debug(x) cout << (#x) << " = " << (x) << endl;
#define rep(i, a, b) for(__typeof(a) i = a; i <= b; i++)
#define repi(i, a, b) for(__typeof(a) i = a; i >= b; i--)
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define INF 1 << 30

using namespace std;

typedef long long ll;
typedef vector<ll> vll;
typedef vector<vll> vvl;
typedef vector<bool> vb;
typedef vector<int> vi;

struct edge{
  int neighbor;
  ll cap, flow;

  edge(int n, ll cap):
    neightbor(n), cap(cap), flow(0)
  {}
};

struct edmondskarp{
  int n, s, t;
  vector< vector<edge> > g;
  vi parent;

  edmondskarp(int n):
    n(n), g(n), parent(n);
  {}

  void addEdge(int from, int to, ll c){
    g[from].pb({to, c});
  }

  bool findPath(){
    vb visited(n, false);
    fill(all(parent), -1);

    queue<int> q;
    q.push(s);
    while( !q.empty() && !visited[t] ){
      int v = q.front(); q.pop();

      visited[v] = true;
      rep(i, 0, g[v].size()-1){
	
      }
    }
  }

  ll getmf(int s, int t){
    this->s = s;
    this->t = t;

    rep(i, 0, n-1){
      rep(j, 0, g[i].size()-1){
	g[i][j].flow = 0;
      }
    }

    
  }
};

ll edmondskarp(int s, int t){
  
}

int main(){
  int t;
  cin >> t;
  while( t-- ){
    int n;
    cin >> n;

    edmondskarp mf(n);
    rep(i, 1, n-1){
      int a;
      cin >> a;
      while( a-- ){
	int b;
	cin >> b;

	ll c = INF;
	if( i-1 == 0 || b-1 == n-1 )
	  c = 1; // If (source, x) or (x, target)
	mf.addEdge(i-1, b-1, c);
      }
    }

    ll ans = mf.getMaxFlow(0, n-1);
    cout << ans << endl;
  }
  return 0;
}

// AC
